#!/bin/bash

# Update Documentation Script for Encriptofy
# This script helps maintain the docs/PROJECT_STATE_DOCUMENTATION.md file

echo "🔄 Updating Encriptofy Project Documentation..."

# Change to project root directory
cd "$(dirname "$0")/.." || exit 1

# Get current date
CURRENT_DATE=$(date +"%B %Y")

# Get project version from package.json
PROJECT_VERSION=$(node -pe "require('./package.json').version")

# Create backup of existing documentation
DOC_FILE="docs/PROJECT_STATE_DOCUMENTATION.md"
if [ -f "$DOC_FILE" ]; then
    cp "$DOC_FILE" "docs/PROJECT_STATE_DOCUMENTATION.md.backup.$(date +%Y%m%d_%H%M%S)"
    echo "✅ Backup created"
fi

# Update the last updated date in the documentation
sed -i "s/\*\*Last Updated:\*\* .*/\*\*Last Updated:\*\* $CURRENT_DATE/" "$DOC_FILE"

# Update version if provided as argument
if [ "$1" ]; then
    sed -i "s/\*\*Version:\*\* .*/\*\*Version:\*\* $1/" "$DOC_FILE"
    echo "✅ Version updated to $1"
else
    sed -i "s/\*\*Version:\*\* .*/\*\*Version:\*\* $PROJECT_VERSION/" "$DOC_FILE"
    echo "✅ Version updated to $PROJECT_VERSION"
fi

# Function to get package version
get_package_version() {
    local package_json_path=$1
    local package_name=$2
    
    if [ -f "$package_json_path" ]; then
        node -pe "
            try {
                const pkg = require('$package_json_path');
                const deps = {...(pkg.dependencies || {}), ...(pkg.devDependencies || {})};
                console.log(deps['$package_name'] || 'Not found');
            } catch(e) {
                console.log('Error reading package.json');
            }
        " 2>/dev/null
    else
        echo "Not found"
    fi
}

# Update technology versions
echo "🔍 Checking current package versions..."

# Frontend versions
REACT_VERSION=$(get_package_version "./client/package.json" "react")
VITE_VERSION=$(get_package_version "./client/package.json" "vite")
ROUTER_VERSION=$(get_package_version "./client/package.json" "react-router-dom")
TAILWIND_VERSION=$(get_package_version "./client/package.json" "tailwindcss")

# Backend versions
EXPRESS_VERSION=$(get_package_version "./server/package.json" "express")
MONGOOSE_VERSION=$(get_package_version "./server/package.json" "mongoose")
PASSPORT_VERSION=$(get_package_version "./server/package.json" "passport")
JWT_VERSION=$(get_package_version "./server/package.json" "jsonwebtoken")

echo "📊 Current versions found:"
echo "  React: $REACT_VERSION"
echo "  Vite: $VITE_VERSION"
echo "  Express: $EXPRESS_VERSION"
echo "  Mongoose: $MONGOOSE_VERSION"

# Generate a simple status report
echo "
## 📈 Latest Update Summary

**Update Date:** $CURRENT_DATE
**Updated By:** $(git config user.name || echo 'Unknown')

### Recent Changes
$(git log --oneline -10 --since='1 week ago' | head -5 | sed 's/^/- /')

### Package Versions Status
- React: $REACT_VERSION
- Vite: $VITE_VERSION  
- Express: $EXPRESS_VERSION
- Mongoose: $MONGOOSE_VERSION
- Passport.js: $PASSPORT_VERSION

### Quick Health Check
- ✅ Documentation updated
- $([ -f "docker/docker-compose.yml" ] && echo "✅ Docker config present" || echo "❌ Docker config missing")
- $([ -f "config/env.example" ] && echo "✅ Environment template present" || echo "❌ Environment template missing")
- $([ -f "package.json" ] && echo "✅ Root package.json present" || echo "❌ Root package.json missing")
- $([ -d "client" ] && echo "✅ Frontend directory present" || echo "❌ Frontend directory missing")
- $([ -d "server" ] && echo "✅ Backend directory present" || echo "❌ Backend directory missing")

---
*Auto-generated by scripts/update-docs.sh*
" >> "$DOC_FILE"

echo "✅ Documentation updated successfully!"
echo "📝 Review $DOC_FILE for the latest project state"

# Optionally commit the changes
read -p "🔄 Would you like to commit these documentation changes? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    git add docs/
    git commit -m "docs: update project state documentation - $CURRENT_DATE"
    echo "✅ Changes committed!"
fi

echo "🎉 Documentation update complete!" 