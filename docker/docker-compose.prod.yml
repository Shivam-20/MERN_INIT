version: '3.8'

services:
  # MongoDB Service
  mongodb:
    image: mongo:6.0
    container_name: encriptofy-mongodb-prod
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_prod:/data/db
    environment:
      - MONGO_INITDB_DATABASE=encriptofy
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand({ ping: 1 })'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - encriptofy-prod-network

  # Backend Service
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: encriptofy-backend-prod
    restart: always
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/encriptofy
      - JWT_SECRET=your_secure_jwt_secret_key_production
      - JWT_EXPIRES_IN=1d
      - ADMIN_EMAIL=admin@example.com
      - ADMIN_PASSWORD=change_this_secure_password
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - encriptofy-prod-network

  # Frontend Service (Nginx)
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.nginx
    container_name: encriptofy-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      - VITE_API_URL=/api/v1
    depends_on:
      - backend
    networks:
      - encriptofy-prod-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: encriptofy-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./client/dist:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - encriptofy-prod-network

networks:
  encriptofy-prod-network:
    driver: bridge

volumes:
  mongodb_data_prod:
    name: mongodb_data_prod
